-切图和命名[美术]

1.图片应该以主体内容居中,而不是以整个内容居中.比如按钮下沿有阴影,那么切图时上面也要留出和阴影相同的空白像素,而使按钮在图片内居中,否则每次制作按钮,按钮上的文字都得向上偏移几个像素,完全没必要.

2.尽量图片尺寸小,并且不需要压缩清晰度,因为在Unity项目内,会根据尺寸和Unity自己的压缩选项决定该图片在内存的大小.但是出图时尽量减小占硬盘大小,否则会导致项目增大(注意:是项目增大,不一定是游戏包增大,占硬盘大小和游戏包大小没有直接联系),导致项目同步时间变长.

命名的重要性 ,可以参考功能、颜色、尺寸等特点命名,命名尽量使用英文,并且使用帕斯卡命名法或驼峰命名法,可以添加前缀表示所属功能,使使用的人望文生义,严格避免无意义的名字.比如金币图标,就是Icon_Gold,英雄头像,就是HeroHead_ZhangFei(是的,使用拼音了,但是要尽量避免英文和拼音混合).

3. 给ui制作人员讲解九宫格的设计方法，设计的时候九宫格加上装饰，设计时候尽量采用九宫格的资源

4. 对于不同分辨率自适应方面事先沟通好，给其讲解锚点的意义，以及设计的时候考虑多分辨率的情况，保证效果，特殊手机比如iphonex之类的在代码里面直接写上如果设备识别是特殊类型，进行定制的自适应方案

5. 规范ui最终的输出提交，通用ui放在一个文件夹，比如通用按钮，图标之类，不同页面的ui资源放到各自名字的文件夹，后期打ab包的时候，如果通用资源的altas比较空，可以去不同页面的资源的文件夹下面把相应的比较小的资源丢进去，保证altas被填满，同时这种做法可以减少打ab包的时候有冗余资源

-图片压缩[前端]

图片导入到Unity,使用的时候占用内存,1024×1024图片,不带Mipmaps:

不压缩,带透明通道占内存4M,不带透明通道3M.

压缩后,带透明通道1M,不带透明通道0.5M.

所以,不是特别注重品质的UI,推荐使用压缩,但是压缩也有一个规则,那就是边长必须是2的幂次方,否则不能压缩.

如果使用Unity自带的SpritePacker合并图集,那么该组图片应该是一种设置,否则会根据设置不同合并为多张图集.

Mipmaps不推荐开启,因为UI不会存在距离,开启Mipmaps会增加内存反而不合适.

图片压缩还有一种方法是A通道和RGB通道分离,当使用的时候再用shader合并到一起

可以使用AssetPostProcessor控制资源导入的选项，以防止单纯靠手动导入出现遗忘的几率

-图片分类[美术和前端]

在项目中,图片可以根据用途分为多重类型,UI、Icon(或Sprite)、大尺寸Icon、背景原画、贴图,因为贴图一般是3D模型或Lightingmap不属于UI方面,所以这里不介绍了.

--UI

UI是窗口的重要组成部分,决定该窗口风格和布局,尽量九宫格或者平铺,并且尽量复用.

--Icon

相同类型的小图标,比如物品图片、英雄头像等,每种类型图标尺寸一致,物品图片100×100,英雄头像120×120,并且内容居中.前端可以把一组Icon合并成图集来使用,DarwCall一般只有一个.

--大尺寸Icon

和Icon类似,但是通常尺寸较大,比如英雄形象,合并图集太大,因此一般不合并图集,所以也不推荐一个UI上显示很多,会导致DarwCall和内存都会增大.

--背景原画

通常用在加载界面等,一般不需要带透明通道并且压缩,还要考虑屏幕尺寸适配. 可以分层绘制导出，在引擎中拼成一张图这样子可以减少内存消耗，以及减少包体大小，但是要注意适应不同分辨率的情况，非重点图片可以采用低分辨率，重点图片采用高分辨率

 

-UI元素规范[美术和前端]

--文字

为了丰富游戏表现方式,在不同的地方有多种颜色和字号,因为PS和Unity两种工具有可能会有误差,所以首先商定通用字号,比如标题通用26号,内容通用20号等.颜色可以由美术出一张色值表,包括一种颜色的RGBA值和16进制值,方便开发人员快速定位准确颜色.

色值表

 
Unity保存色值方法
